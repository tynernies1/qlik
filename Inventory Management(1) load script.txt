///$tab Main
SET ThousandSep=',';
SET DecimalSep='.';
SET MoneyThousandSep=',';
SET MoneyDecimalSep='.';
SET MoneyFormat='$#,##0.00;-$#,##0.00';
SET TimeFormat='h:mm:ss TT';
SET DateFormat='M/D/YYYY';
SET TimestampFormat='M/D/YYYY h:mm:ss[.fff] TT';
SET FirstWeekDay=6;
SET BrokenWeeks=1;
SET ReferenceDay=0;
SET FirstMonthOfYear=1;
SET CollationLocale='en-US';
SET CreateSearchIndexOnReload=1;
SET MonthNames='Jan;Feb;Mar;Apr;May;Jun;Jul;Aug;Sep;Oct;Nov;Dec';
SET LongMonthNames='January;February;March;April;May;June;July;August;September;October;November;December';
SET DayNames='Mon;Tue;Wed;Thu;Fri;Sat;Sun';
SET LongDayNames='Monday;Tuesday;Wednesday;Thursday;Friday;Saturday;Sunday';
SET NumericalAbbreviation='3:k;6:M;9:G;12:T;15:P;18:E;21:Z;24:Y;-3:m;-6:Î¼;-9:n;-12:p;-15:f;-18:a;-21:z;-24:y';
///$tab Extract
LIB CONNECT TO 'Repository:Google_BQ-BDA';
Qualify *;

VitalTables:
SQL
select
  concat(table_catalog, '.', table_schema, '.', table_name) as table_id,
  case
    when concat(table_catalog, '.', table_schema, '.', table_name) = 'kohls-bda-prd.dp_logistics.bqt_lgs_raas_rpt' then
      format_timestamp(
        '%Y-%m-%d %H:%M:%S',
        timestamp(
          safe_cast(
            regexp_replace(
              regexp_extract(
                option_value,
                r'STRUCT\("last-load-ct", "([^"]+?)"\)'
              ),
              '_',
              ':'
            ) as datetime
          ),
          'America/Chicago'
        ),
        'UTC'
      )
  end as last_modified,
  case
    when concat(table_catalog, '.', table_schema, '.', table_name) = 'kohls-bda-prd.dp_logistics.bqt_lgs_raas_rpt' then
      if(
        timestamp(
          safe_cast(
            regexp_replace(
              regexp_extract(
                option_value,
                r'STRUCT\("last-load-ct", "([^"]+?)"\)'
              ),
              '_',
              ':'
            ) as datetime
          ),
          'America/Chicago'
        ) > timestamp('$(vLastReloaded)'),
        1,
        0
      )
  end as is_updated
from
  `kohls-bda-prd.region-us.INFORMATION_SCHEMA.TABLE_OPTIONS`
where
  option_name = 'labels'
  and concat(table_catalog, '.', table_schema, '.', table_name) in (
    'kohls-bda-prd.dp_logistics.bqt_lgs_raas_rpt'
  );

Unqualify *;


Trace App last reloaded $(vLastReloaded) UTC;
For r = 0 to NoOfRows('VitalTables') - 1
	Let vTableId = Peek('VitalTables.table_id', $(r), 'VitalTables');
    Let vLastModified = Peek('VitalTables.last_modified', $(r), 'VitalTables');
    Trace $(vTableId) last updated $(vLastModified) UTC;
Next r;
VitalTableCounts:
Load
	Sum(VitalTables.is_updated) as vital_updated,
    Count(VitalTables.is_updated) as vital_expected
Resident
	VitalTables;
Let vUpdatedVitalTables = FieldValue('vital_updated', 1);
Let vExpectedVitalTables = FieldValue('vital_expected', 1);
Trace Vital BQ tables updated: $(vUpdatedVitalTables) of $(vExpectedVitalTables);
If vUpdatedVitalTables = vExpectedVitalTables Then
    $(Must_Include=lib://Repository:Google_Cloud_Storage-Qlik/enterprise/subroutines/s_trigger_reload.txt);
    Set ErrorMode = 0;
    //Call s_trigger_reload('384f7346-19af-4258-967f-f0fe366775dd', 'Repository:REST_Trigger_Reload', 'Repository:DataFiles');
////Managed space version of app change, switch to this version before publishing.    
	Call s_trigger_reload('774d5871-dff8-4130-bb9d-23530cd70667', 'Repository:REST_Trigger_Reload', 'Repository:DataFiles');
    
    If ScriptError = 0 Then 
    	Let vLastReloaded = Timestamp(UTC(), 'YYYY-MM-DD hh:mm:ss');
    	Trace Target app successfully reloaded;
    Else 
    	Trace Target app failed to reloaded due to s_trigger_reload failing;
    End If
    Set ErrorMode = 1;
Else 
	Trace Dependencies not all met, skipping reload;
End If
///$tab Exit 
Exit Script;
///$tab Section
LIB CONNECT TO 'Repository:Google_BQ-BDA';


Qualify *;
VitalTables:
SQL
select
  concat(project_id, '.', dataset_id, '.', table_id) as table_id,
  format_timestamp('%Y-%m-%d %H:%M:%S', timestamp_millis(last_modified_time), 'UTC') as last_modified,
  case when timestamp_millis(last_modified_time) > timestamp('$(vLastReloaded)') then 1 else 0 end as is_updated
from
  `kohls-bda-prd.dp_store`.__TABLES__
where
  table_id in (
    'bqt_lgs_raas_rpt'
//   )
// union all
// select
//   concat(project_id, '.', dataset_id, '.', table_id) as table_id,
//   format_timestamp('%Y-%m-%d %H:%M:%S', timestamp_millis(last_modified_time), 'UTC') as last_modified,
//   case when timestamp_millis(last_modified_time) > timestamp('$(vLastReloaded)') then 1 else 0 end as is_updated
// from
//   `kohls-bda-prd.dp_location`.__TABLES__
// where
//   table_id in (
//     'bqt_lgs_loc_dim','bqt_lgs_dist','bqt_lgs_terr'
//   )
// union all
// select
//   concat(project_id, '.', dataset_id, '.', table_id) as table_id,
//   format_timestamp('%Y-%m-%d %H:%M:%S', timestamp_millis(last_modified_time), 'UTC') as last_modified,
//   case when timestamp_millis(last_modified_time) > timestamp('$(vLastReloaded)') then 1 else 0 end as is_updated
// from
//   `kohls-bda-prd.dp_sales`.__TABLES__
// where
//   table_id in (
//     'bqt_sls_vrfd_trn',
//     'bqt_fin_sls_trn_msg'
  );
Unqualify *;
Trace App last reloaded $(vLastReloaded) UTC;
For r = 0 to NoOfRows('VitalTables') - 1
	Let vTableId = Peek('VitalTables.table_id', $(r), 'VitalTables');
    Let vLastModified = Peek('VitalTables.last_modified', $(r), 'VitalTables');
    Trace $(vTableId) last updated $(vLastModified) UTC;
Next r;
VitalTableCounts:
Load
	Sum(VitalTables.is_updated) as vital_updated,
    Count(VitalTables.is_updated) as vital_expected
Resident
	VitalTables;
Let vUpdatedVitalTables = FieldValue('vital_updated', 1);
Let vExpectedVitalTables = FieldValue('vital_expected', 1);
Trace Vital BQ tables updated: $(vUpdatedVitalTables) of $(vExpectedVitalTables);
If vUpdatedVitalTables = vExpectedVitalTables Then
    $(Must_Include=lib://Repository:Google_Cloud_Storage-Qlik/enterprise/subroutines/s_trigger_reload.txt);
    Set ErrorMode = 0;
    Call s_trigger_reload('fb323378-e705-4c67-a7f6-44159e2ea85a', 'Repository:REST_Trigger_Reload', 'Repository:DataFiles');
    If ScriptError = 0 Then 
    	Let vLastReloaded = Timestamp(UTC(), 'YYYY-MM-DD hh:mm:ss');
    	Trace Target app successfully reloaded;
    Else 
    	Trace Target app failed to reloaded due to s_trigger_reload failing;
    End If
    Set ErrorMode = 1;
Else 
	Trace Dependencies not all met, skipping reload;
End If
